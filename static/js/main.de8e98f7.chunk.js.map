{"version":3,"sources":["components/InputForm.js","components/AccountInfo.js","lib/accountService.js","App.js","index.js"],"names":["InputForm","props","onSubmit","handleSubmit","type","onChange","handleInputChange","value","userInput","AccountInfo","accounts","output","accountItems","Object","keys","map","key","baseUrl","headers","App","state","evt","preventDefault","username","setState","errorMessage","getJobID","then","res","getAccounts","handleEmptySubmit","target","a","message","fetch","method","body","JSON","stringify","response","text","jobId","job","timeout","poll","status","console","log","clearTimeout","json","setTimeout","accountInfo","submitHandler","this","className","Component","ReactDOM","render","document","getElementById"],"mappings":"iQAGaA,G,MAAY,SAACC,GAAD,OAEvB,0BAAMC,SAAUD,EAAME,cAAtB,cACa,2BAAOC,KAAK,OACrBC,SAAUJ,EAAMK,kBAChBC,MAAON,EAAMO,YAEf,6CCRSC,EAAc,SAACR,GAC1B,IAAMS,EAAWT,EAAMS,SAAS,GAAGC,OAC7BC,EAAgBC,OAAOC,KAAKJ,GAAUK,IAAI,SAASC,GACvD,OAAO,oCAAUA,EAAV,YAAwBN,EAASM,MAE1C,OACE,6BACE,uCACA,6BACA,6BACE,4BACGJ,MCbEK,EAAU,kDACVC,EAAW,CACtB,OAAU,mBACV,eAAgB,oBCmGHC,E,2MA9FbC,MAAQ,CACNZ,UAAW,GACXE,SAAU,M,EAGZP,aAAe,SAACkB,GACdA,EAAIC,iBACJ,IAAMC,EAAW,CAACA,SAAU,EAAKH,MAAMZ,WACvC,EAAKgB,SAAS,CACZhB,UAAW,GACXiB,aAAc,KAGhB,EAAKC,SAASH,GACbI,KAAK,SAAAC,GAAG,OAAI,EAAKC,YAAYD,M,EAGhCE,kBAAoB,SAACT,GACnBA,EAAIC,iBACJ,EAAKE,SAAS,CACZC,aAAc,8B,EAIlBnB,kBAAoB,SAACe,GACnB,EAAKG,SAAS,CACZhB,UAAWa,EAAIU,OAAOxB,S,EAI1BmB,S,sCAAW,WAAOH,GAAP,iBAAAS,EAAA,4DACT,EAAKR,SAAS,CAACS,QAAS,eADf,SAEcC,MAAMjB,EAAU,SAAU,CAC/CkB,OAAQ,OACRjB,UACAkB,KAAMC,KAAKC,UAAUf,KALd,cAEHgB,EAFG,gBAQWA,EAASC,OARpB,cAQHC,EARG,yBASFA,GATE,yC,wDAYXZ,YAAc,SAACa,GACb,IAAIC,EAEEC,EAAI,sCAAG,8BAAAZ,EAAA,qEACOE,MAAM,GAAD,OAAIjB,EAAJ,oBAAuByB,GAAO,CACnDP,OAAQ,MACRjB,YAHS,UAMO,OALZU,EADK,QAMJiB,OANI,gBAOTC,QAAQC,IAAI,OAPH,0BASa,MAAfnB,EAAIiB,OATF,wBAUTG,aAAaL,GAVJ,UAWUf,EAAIqB,OAXd,eAWHA,EAXG,OAYT,EAAKzB,SAAS,CACZd,SAAUuC,EACVhB,QAAS,KAdF,mBAgBF,GAhBE,QAkBXU,EAAUO,WAAWN,EAAM,KAlBhB,0CAAH,qDAoBVA,K,wEAIA,IAEIO,EAFEC,EAAgBC,KAAKjC,MAAMZ,UAAY6C,KAAKlD,aAAekD,KAAKvB,kBAOtE,OANqC,MAAvBuB,KAAKjC,MAAMV,WAGvByC,EAAc,kBAAC,EAAD,CAAazC,SAAW2C,KAAKjC,MAAMV,YAInD,yBAAK4C,UAAU,OACb,6BACGD,KAAKjC,MAAMK,cAAgB,0BAAM6B,UAAU,SAASD,KAAKjC,MAAMK,cAC/D4B,KAAKjC,MAAMa,SAAW,0BAAMqB,UAAU,WAAWD,KAAKjC,MAAMa,SAC7D,kBAAC,EAAD,CACE3B,kBAAmB+C,KAAK/C,kBACxBE,UAAW6C,KAAKjC,MAAMZ,UACtBL,aAAciD,IAEfD,Q,GAvFSI,aCFlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.de8e98f7.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nexport const InputForm = (props) => (\n\n  <form onSubmit={props.handleSubmit}>\n    Usernames: <input type=\"text\"\n      onChange={props.handleInputChange}\n      value={props.userInput}\n    />\n    <button>Submit</button>\n  </form>  \n)\n\n  InputForm.propTypes = {\n    userInput: PropTypes.string.isRequired,\n    handleInputChange: PropTypes.func.isRequired,\n    handleSubmit: PropTypes.func.isRequired\n  }\n","import React from 'react'\n\nexport const AccountInfo = (props) => {\n  const accounts = props.accounts[0].output\n  const accountItems =  Object.keys(accounts).map(function(key) {\n    return <li>Key: {key}, Value: {accounts[key]}</li>})\n\n  return (\n    <div>\n      <h3>Results</h3>\n      <hr/>\n      <div>\n        <ul>\n          {accountItems}\n        </ul>\n      </div>\n    </div>\n  )\n}\n","export const baseUrl = ' https://fe-test-zyper-engagement.herokuapp.com'\nexport const headers =  {\n  'Accept': 'application/json',\n  'Content-Type': 'application/json'\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport { InputForm } from './components/InputForm.js'\nimport { AccountInfo } from './components/AccountInfo.js'\nimport {baseUrl, headers} from './lib/accountService'\n\n\nclass App extends Component {\n  state = {\n    userInput: '',\n    accounts: null,\n  }\n\n  handleSubmit = (evt) => {\n    evt.preventDefault()\n    const username = {username: this.state.userInput}\n    this.setState({\n      userInput: '',\n      errorMessage: ''\n    })\n\n    this.getJobID(username)\n    .then(res => this.getAccounts(res))\n  }\n\n  handleEmptySubmit = (evt) => {\n    evt.preventDefault()\n    this.setState({\n      errorMessage: 'Please supply a username'\n    })\n  }\n\n  handleInputChange = (evt) => {\n    this.setState({\n      userInput: evt.target.value\n    })\n  }\n\n  getJobID = async (username) => {\n    this.setState({message: 'Loading...'})\n    const response = await fetch(baseUrl + '/start', {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(username)\n    })\n\n    const jobId = await response.text();\n    return jobId;\n  }\n\n  getAccounts = (job) => {\n    let timeout;\n\n    const poll = async () => {\n      const res = await fetch(`${baseUrl}/results/${job}`, {\n        method: 'GET',\n        headers\n      })\n\n      if(res.status === 202) {\n        console.log('202');\n      } \n      else if (res.status === 200){\n        clearTimeout(timeout);\n        const json = await res.json();\n        this.setState({\n          accounts: json,\n          message: ''\n        })\n        return false;\n      }\n      timeout = setTimeout(poll, 2000);\n    };\n    poll()\n  }\n\n  render() {\n    const submitHandler = this.state.userInput ? this.handleSubmit : this.handleEmptySubmit\n    const ready = this.state.accounts != null;\n    let accountInfo;\n    if (ready) {\n      accountInfo = <AccountInfo accounts= {this.state.accounts}/>\n    }\n    \n    return (\n    <div className=\"App\">\n      <div>\n        {this.state.errorMessage && <span className='error'>{this.state.errorMessage}</span>}\n        {this.state.message && <span className='loading'>{this.state.message}</span>}\n        <InputForm \n          handleInputChange={this.handleInputChange}\n          userInput={this.state.userInput}\n          handleSubmit={submitHandler}\n        />\n        {accountInfo}\n      </div>\n    </div>\n    )\n  }\n}\n\n\nexport default App;\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}